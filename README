~~~~~
NEW!!
~~~~~

Improved tracing
================

From the command line
---------------------

$ cd kmod; make; insmod ./mntracer.ko

- Does not pollute syslog with printk messages.

To enable tracing, just do:

$ cd /sys/kernel/debug/tracing
$ cat current_tracer

- If it's nop, it's fine.  Our custom tracing will print information
  regardless of any other tracing that's active.

$ grep mininet available_events
mininet:mn_htb
mininet:mn_sched_switch

- To start tracing:
$ echo 1 > events/mininet/enable
$ cat trace_pipe > /tmp/trace-output

- To stop tracing
$ echo 0 > events/mininet/enable


Bash helper functions
---------------------

Here are bash helper functions that you can add to mininet experiment
shell scripts.  Make sure you call the functions!

These are available in trace.sh.  Include by issuing "source /path/to/trace.sh"

trace_start() {
	# argument: pass the path to save trace output

	traceoutput=${1-/tmp/mntrace}
	pushd /sys/kernel/debug/tracing

	# Enable ALL mininet events
	echo 1 > events/mininet/enable

	# Other events of interest
	for event in softirq_{raise,entry,exit}; do
		echo 1 > events/irq/$event/enable
	done

	# Enable tracing
	echo 1 > tracing_enabled
	echo 0 > tracing_on
	echo 1 > tracing_on

	popd
	echo "Writing trace to $traceoutput"
	(cat /sys/kernel/debug/tracing/trace_pipe > $traceoutput &)
}

trace_stop() {
	pushd /sys/kernel/debug/tracing
	echo 0 > tracing_enabled
	echo 0 > tracing_on
	echo 0 > events/mininet/enable
	echo "Flushing trace"
	((cat trace_pipe > /dev/null &); sleep 5; killall -9 cat;)
	echo "Finishing..."
	wait
	popd
}

trace_plot() {
	# argument: pass the path to saved trace output
	dir=${BASH_SOURCE[0]}
	parse=$dir/parse.py
	traceoutput=${1-/tmp/mntrace}
	python $parse -f $traceoutput --odir $(dirname $traceoutput)/plots
}
